# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Start from scratch starter project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
#     # to their current application. All the functions and roles in this application have to include it and
#     # it has to be manually updated when you add resources to your application.
#     # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
#     PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

Parameters:
  AppId:
    Type: String
  StageName:
    Type: String
    Default: Prod
  DeviceTable:
    Type: AWS::SSM::Parameter::Value<String>
    Default: iot-device-api-device-table
  SimulatorQueue:
    Type: AWS::SSM::Parameter::Value<String>
    Default: iot-device-api-simulator-queue
  SimulatorQueueName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: iot-device-api-simulator-queue-name

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  iotGetDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/index.handler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A Lambda function that returns a static string.
      Environment:
        Variables:
          DEVICES_TBL: !Ref DeviceTable
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref DeviceTable
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /device
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
  
  iotUpdateDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/updateHandler/index.handler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A Lambda function that update device stage
      Environment:
        Variables:
          DEVICES_TBL: !Ref DeviceTable
          SIMULATOR_QUEUE: !Ref SimulatorQueue
      Policies: 
        # - SQSSendMessagePolicy:
        #     QueueName: !Ref SimulatorQueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable
        
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: PUT
            Path: /device
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
  
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      RouteSettings:
        "GET /device":
          ThrottlingBurstLimit: 500 # overridden in HttpApi Event
        "PUT /device":
          ThrottlingBurstLimit: 500 # overridden in HttpApi Event
      FailOnWarnings: true

